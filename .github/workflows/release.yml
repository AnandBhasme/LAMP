name: Build and Release Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Use the latest Python 3.x version

    - name: Install dependencies (Linux)
      if: runner.os != 'Windows'
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt 2>&1 | tee $GITHUB_WORKSPACE/pip_output.log
        if [ $? -ne 0 ]; then
          echo "Failed to install requirements. See error below:"
          cat $GITHUB_WORKSPACE/pip_output.log
          exit 1
        fi
        pip install pyinstaller 2>&1 | tee $GITHUB_WORKSPACE/pip_output_pyinstaller.log
        if [ $? -ne 0 ]; then
          echo "Failed to install pyinstaller. See error below:"
          cat $GITHUB_WORKSPACE/pip_output_pyinstaller.log
          exit 1
        fi
        echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV
        echo "PATH=$(pwd)/venv/bin:$PATH" >> $GITHUB_ENV

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        python -m venv venv
        Write-Host "Created virtual environment."
        .\venv\Scripts\Activate.ps1
        Write-Host "Activated virtual environment."
        pip install -r requirements.txt 2>&1 | Tee-Object -FilePath "$env:GITHUB_WORKSPACE\pip_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Failed to install requirements. See error below:"
          Get-Content "$env:GITHUB_WORKSPACE\pip_output.log"
          exit 1
        }
        Write-Host "Installed requirements successfully."
        pip install pyinstaller 2>&1 | Tee-Object -FilePath "$env:GITHUB_WORKSPACE\pip_output_pyinstaller.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Failed to install pyinstaller. See error below:"
          Get-Content "$env:GITHUB_WORKSPACE\pip_output_pyinstaller.log"
          exit 1
        }
        Write-Host "Installed pyinstaller successfully."
        echo "VIRTUAL_ENV=$(pwd)\\venv" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "Updated VIRTUAL_ENV."
        echo "PATH=$(pwd)\\venv\\Scripts;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "Updated PATH."
      env:
        pythonLocation: ${{ runner.tool_cache }}/windows/Python/3.x.x64

    - name: Upload log files
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: log-files
        path: |
          ${{ github.workspace }}\pip_output.log
          ${{ github.workspace }}\pip_output_pyinstaller.log

    - name: Build executable (Linux)
      if: runner.os != 'Windows'
      run: |
        source venv/bin/activate
        pyinstaller --onefile app.py

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        .\venv\Scripts\Activate.ps1
        pyinstaller --onefile app.py

    - name: Upload executable artifact
      uses: actions/upload-artifact@v2
      with:
        name: executable-${{ matrix.os }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: executable-${{ matrix.os }}
        path: ./dist

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/app
        asset_name: app-${{ matrix.os }}.exe
        asset_content_type: application/octet-stream